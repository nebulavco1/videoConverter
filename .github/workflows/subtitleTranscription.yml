name: Subtitle Transcription

on:
  repository_dispatch:
    types:
      - subtitleTranscription

jobs:
  process-subtitle:
    runs-on: ubuntu-latest
    container:
      image: nebulavc/nebula-whisper:0.0.1
      options: --privileged
    # strategy:
    #   matrix:
    #     part: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    steps:
    # - uses: actions/checkout@v4
    - name: Transcription
      env:
        videoURL: ${{ github.event.client_payload.videoURL }}
        # matrixPart: ${{ matrix.part }}
        videoLanguage: ${{ github.event.client_payload.videoLanguage }}
      run: |
        # Transcription
        echo "videoName=$(basename "$(sed 's/\/ *$//;s/\.[^.]*$//' <<< $videoURL)")" >> $GITHUB_ENV
        mkdir logs
        curl -s -H "Authorization: token ${{ secrets.TOKEN }}" -H "Accept: application/vnd.github.v3.raw" -L https://api.github.com/repos/${{ secrets.REPO_ORIGIN }}/contents/process-subtitle.sh -o process-subtitle.sh
        bash process-subtitle.sh > logs/subtitle.log 2>&1

    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     install-dependencies: false

    # - name: Upload ${{ env.videoName }} output
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ env.videoName }}
    #     path: |
    #       ${{ env.videoName }}/

    - name: Upload log to bucket
      if: ${{ always() }}
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --cache-control 'max-age=0, no-cache, no-store, must-revalidate' --content-type 'text/plain'
      env:
        AWS_S3_BUCKET: ${{ secrets.S3_R2_BUCKET }}/users/${{ github.event.client_payload.user }}/${{ env.videoName }}/logs
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_R2_SECRET_ACCESS_KEY }}
        AWS_S3_ENDPOINT: https://${{ secrets.S3_R2_ENDPOINT }}
        SOURCE_DIR: logs

    - name: Upload subtitle to bucket
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --cache-control 'max-age=0, no-cache, no-store, must-revalidate' --content-type 'text/vtt'
      env:
        AWS_S3_BUCKET: ${{ secrets.S3_R2_BUCKET }}/users/${{ github.event.client_payload.user }}/${{ env.videoName }}
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_R2_SECRET_ACCESS_KEY }}
        AWS_S3_ENDPOINT: https://${{ secrets.S3_R2_ENDPOINT }}
        SOURCE_DIR: ${{ env.videoName }}

  # concat-subtitle:
  #   needs: process-subtitle
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Download all artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       path: subtitle/

    # - name: Delete artifacts
    #   if: ${{ always() }}
    #   run: |
    #     # Lista todos os artifacts
    #     artifacts=$(curl -s -H "Authorization: token ${{ secrets.TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/artifacts | jq -r '.artifacts[] | select(.expired == false) | .id')
    #
    #     # Loop para deletar cada artifact
    #     for artifact_id in $artifacts; do
    #       echo "Deleting artifact $artifact_id"
    #       curl -s -X DELETE -H "Authorization: token ${{ secrets.TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id
    #     done

    # - name: Concat subtitle
    #   env:
    #     videoURL: ${{ github.event.client_payload.videoURL }}
    #   run: |
    #     # Concatenate subtitle
    #     # videoName=$(basename "$(sed 's/\/ *$//;s/\.[^.]*$//' <<< $videoURL)")"
    #     # mkdir {$videoName,logs}
    #     # curl -s -H "Authorization: token ${{ secrets.TOKEN }}" -H "Accept: application/vnd.github.v3.raw" -L https://api.github.com/repos/${{ secrets.REPOORIGIN }}/contents/concat-subtitle.sh -o concat-subtitle.sh
    #     bash concat-subtitle.sh #> logs/parte_$matrixPart.log 2>&1
    #
    # # - name: Setup tmate session
    # #   uses: mxschmitt/action-tmate@v3
    # #   if: ${{ always() }}
    #
    # - name: Upload part ${{ matrix.part }} output
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: part_${{ matrix.part }}
    #     path: |
    #       subtitle/


