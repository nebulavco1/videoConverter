name: Video Converter

on:
  repository_dispatch:
    types:
      - videoConverter_*

jobs:
  process-video:
    runs-on: ubuntu-latest
    container:
      image: nebulavc/nebulavc_ffmpeg:0.0.1
      options: --privileged
    strategy:
      matrix:
        part: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    steps:
    - name: Process part ${{ matrix.part }}
      env:
        videoURL: ${{ github.event.client_payload.videoURL }}
        matrixPart: ${{ matrix.part }}
        videoOutputFormat: ${{ github.event.client_payload.videoOutputFormat }}
        videoOutputScale: ${{ github.event.client_payload.videoOutputScale }}
      run: |
        #Process part ${{ matrix.part }}
        echo "videoName=$(basename "$(sed 's/\/ *$//;s/\.[^.]*$//' <<< $videoURL)")" >> $GITHUB_ENV
        echo "videoOutputScale=$videoOutputScale" >> $GITHUB_ENV
        mkdir logs
        curl -s -H "Authorization: token ${{ secrets.TOKEN }}" -H "Accept: application/vnd.github.v3.raw" -L https://api.github.com/repos/${{ secrets.REPO_ORIGIN }}/contents/processo-video.sh -o processo-video.sh
        bash processo-video.sh > logs/parte_$matrixPart.log 2>&1

    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     install-dependencies: false

    - name: Upload part ${{ matrix.part }} output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.videoName }}_${{ env.videoOutputScale }}_parte_${{ matrix.part }}
        path: |
          ${{ env.videoName }}_${{ env.videoOutputScale }}_parte_${{ matrix.part }}

    - name: Upload log to bucket
      if: ${{ always() }}
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --cache-control 'max-age=0, no-cache, no-store, must-revalidate' --content-type 'text/plain'
      env:
        AWS_S3_BUCKET: ${{ secrets.S3_R2_BUCKET }}/users/${{ github.event.client_payload.user }}/${{ env.videoName }}/logs/${{ env.videoOutputScale }}
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_R2_SECRET_ACCESS_KEY }}
        AWS_S3_ENDPOINT: https://${{ secrets.S3_R2_ENDPOINT }}
        SOURCE_DIR: logs

    - name: Delete artifacts
      if: ${{ failure() }}
      run: |
        # Lista todos os artifacts
        artifacts=$(curl -s -H "Authorization: token ${{ secrets.TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/artifacts | jq -r '.artifacts[] | select(.expired == false) | .id')

        # Loop para deletar cada artifact
        for artifact_id in $artifacts; do
          echo "Deleting artifact $artifact_id"
          curl -s -X DELETE -H "Authorization: token ${{ secrets.TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id
        done

  concat-video:
    needs: process-video
    runs-on: ubuntu-latest
    container:
      image: nebulavc/nebulavc_ffmpeg:0.0.1
      options: --privileged
    steps:
    - name: Set ENVs
      env:
        videoURL: ${{ github.event.client_payload.videoURL }}
        videoOutputScale: ${{ github.event.client_payload.videoOutputScale }}
      run: |
        # Set ENVs
        echo "videoName=$(basename "$(sed 's/\/ *$//;s/\.[^.]*$//' <<< $videoURL)")" >> $GITHUB_ENV
        echo "videoOutputScale=$videoOutputScale" >> $GITHUB_ENV

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ env.videoName }}_${{ env.videoOutputScale }}_parte_*
        path: artefact/

    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     install-dependencies: false

    - name: Delete artifacts
      if: ${{ always() }}
      run: |
        # Lista todos os artifacts
        artifacts=$(curl -s -H "Authorization: token ${{ secrets.TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/artifacts | jq -r '.artifacts[] | select(.expired == false) | select(.name | startswith("${{ env.videoName }}_${{ env.videoOutputScale }}")) | .id')

        # Loop para deletar cada artifact
        for artifact_id in $artifacts; do
          echo "Deleting artifact $artifact_id"
          curl -s -X DELETE -H "Authorization: token ${{ secrets.TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id
        done

    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     install-dependencies: false

    - name: Concatenate video and generate .ts and .m3u8
      env:
        videoURL: ${{ github.event.client_payload.videoURL }}
        videoOutputFormat: ${{ github.event.client_payload.videoOutputFormat }}
        videoOutputScale: ${{ github.event.client_payload.videoOutputScale }}
      run: |
        # Concatenate video
        echo "videoName=$(basename "$(sed 's/\/ *$//;s/\.[^.]*$//' <<< $videoURL)")" >> $GITHUB_ENV
        echo "videoOutputScale=$videoOutputScale" >> $GITHUB_ENV
        mkdir -p {$videoName,logs}
        ls -lha
        for download in concat-video.sh ts-video.sh; do
          curl -s -H "Authorization: token ${{ secrets.TOKEN }}" -H "Accept: application/vnd.github.v3.raw" -L https://api.github.com/repos/${{ secrets.REPO_ORIGIN }}/contents/$download -o $download
        done
        bash concat-video.sh > logs/01-concat.log 2>&1
        bash ts-video.sh > logs/02-tsAndM3u8.log 2>&1

    - name: Upload videos to bucket
      uses: jakejarvis/s3-sync-action@master
      env:
        AWS_S3_BUCKET: ${{ secrets.S3_R2_BUCKET }}/users/${{ github.event.client_payload.user }}/${{ env.videoName }}
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_R2_SECRET_ACCESS_KEY }}
        AWS_S3_ENDPOINT: https://${{ secrets.S3_R2_ENDPOINT }}
        SOURCE_DIR: '${{ env.videoName }}'

    - name: Upload log to bucket
      if: ${{ always() }}
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --cache-control 'max-age=0, no-cache, no-store, must-revalidate' --content-type 'text/plain'
      env:
        AWS_S3_BUCKET: ${{ secrets.S3_R2_BUCKET }}/users/${{ github.event.client_payload.user }}/${{ env.videoName }}/logs/${{ env.videoOutputScale }}
        AWS_ACCESS_KEY_ID: ${{ secrets.S3_R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_R2_SECRET_ACCESS_KEY }}
        AWS_S3_ENDPOINT: https://${{ secrets.S3_R2_ENDPOINT }}
        SOURCE_DIR: logs

